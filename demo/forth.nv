module forth

import super.std.string
import super.std.hashmap

let words = HashMap::default() @[K: String, V: [String]]
let stack = []: String
let recordword = false
let recordquote = false
let currentquote = []: String
let currentword = []: String



fn run(input: [String]) -> Maybe(String) {
    for line in input {
        for word in line.split(' ') {
            if word.len() == 0 {
                continue
            }
            if (recordword) && (word != ";") {
                currentword.push(word)
                continue
            }
            if word == "[" {
                recordquote = true
                continue
            }
            if recordquote {
                if word == "]" {
                    recordquote = false
                    let q = currentquote.foldr(|x: String, y: String| x + " " + y)
                    stack.push(q)
                    currentquote = []: String
                    continue
                }
                currentquote.push(word)
                continue
            }
            if let num = Cast::int(word) {
                stack.push(Cast::string(num))
            } elif word == "call" {
                let w = stack.pop().unwrap()
                return run([w])
            } elif word == "dup" {
                stack.push(stack[stack.len() - 1])
            } elif word == "drop" {
                stack.pop()
            } elif word == "swap" {
                if let a = stack.pop() {
                    if let b = stack.pop() {
                        stack.push(a)
                        stack.push(b)
                    } else {
                        return Maybe::Just("Stack is empty")
                    }
                } else {
                    return Maybe::Just("Stack is empty")
                }
            } elif word == "over" {
                let a = stack.pop().unwrap()
                let b = stack.pop().unwrap()
                stack.push(b)
                stack.push(a)
                stack.push(b)
            } elif word == "rot" {
                let a = stack.pop().unwrap()
                let b = stack.pop().unwrap()
                let c = stack.pop().unwrap()
                stack.push(b)
                stack.push(a)
                stack.push(c)
            } elif word == "+" {
                let a = Cast::int(stack.pop().unwrap()).unwrap()
                let b = Cast::int(stack.pop().unwrap()).unwrap()
                stack.push(Cast::string(a + b))
            } elif word == "-" {
                let a = Cast::int(stack.pop().unwrap()).unwrap()
                let b = Cast::int(stack.pop().unwrap()).unwrap()
                stack.push(Cast::string(b - a))
            } elif word == "*" {
                let a = Cast::int(stack.pop().unwrap()).unwrap()
                let b = Cast::int(stack.pop().unwrap()).unwrap()
                stack.push(Cast::string(a * b))
            } elif word == "/" {
                let a = Cast::int(stack.pop().unwrap()).unwrap()
                let b = Cast::int(stack.pop().unwrap()).unwrap()
                stack.push(Cast::string(b / a))
            } elif word == "." {
                if let x = stack.pop() {
                    println(x)
                } else {
                    return Maybe::Just("Stack is empty")
                }
            } elif word == ":" {
                recordword = true
            } elif word == ";" {
                recordword = false
                words.insert(currentword[0], currentword[1:])
                currentword = []: String
            } elif words.get(word).isSome() {
                return run(words.get(word).unwrap())
            } else {
                println(word)
            }
        }
    }
    return Maybe::Nothing() @[A: String]
}

if let args = terminal::args() {
    let input = readFile(args[0])
        .split('\n')
        .filter(|x: String| x.len() > 0)

    match run(input) {
        Just(z) =>{ println(z) }
        _ => { println("Done") }
    }
} else {
    while true {
        print("> ")
        let line = readln()
        if line == "exit" { break }
        match run([line]) {
            Just(z) => { println(z) }
            _ => { println("Done") }
        }
    }
}