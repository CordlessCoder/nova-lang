struct Int_box {
    value: Int
}

struct Iter {
    create: ([$A]) -> () -> ?$A,
    map: (() -> ?$A, ($A) -> $A) -> () -> ?$A,
    printIter: (() -> ?$A),
    collect: (() -> ?$A) -> [$A],
    filter: (() -> ?$A, ($A) -> Bool) -> [$A],
}

let iter = Iter {
    filter = fn(it: () -> ?$A, f:($A) -> Bool) -> [$A] {
        let t: ?$A = it()
        let list = []:$A
        while t.isSome() {
            if t.unwrap().f() {
                list.push(t.unwrap())
            }
            t = it()
        }
        return list
    },
    create = fn(input:[$A]) -> () -> ?$A {
        let index : Int_box = Int_box {value = 0}    
        return fn() -> ?$A {
            if index.value >= input.len() {
                return none()
            } else {
                let result : ?$A = some(input[index.value])
                index.value = index.value + 1
                return result
            }
        }
    },
    map = fn(it: () -> ?$A, f:($A) -> $A) -> () -> ?$A {
        return fn() -> ?$A {
            let result: ?$A = it()
            if result.isSome() {
                return some(f(result.unwrap()))
            } else {
                return none()
            }
        }
    },
    printIter = fn(it: () -> ?$A) {
        let t: ?$A = it()
        while t.isSome() {
            print(t.unwrap())
            print("\n")
            t = it()
        }
    },
    collect = fn(it: () -> ?$A) -> [$A] {
        let t: ?$A = it()
        let list = []:$A
        while t.isSome() {
            list.push(t.unwrap())
            t = it()
        }
        return list
    }
}