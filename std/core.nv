module core

struct Box(A) {
    value: $A
}

fn extends show(self: Box($A)) {
    println(Cast::string(self.value))
}



fn Gen(start: Int) -> () -> Int {
    let i = Box(start)
    return fn() -> Int {
        i.value += 1
        return i.value - 1
    }
}

// built in Option type 

fn extends orError(self: ?$A, msg: String) -> $A {
    if self.isSome() {
        return self.unwrap()
    }
    println(msg)
    exit()
    // unreachable
    pass
}

fn extends orDefault(self: ?$A, default: $A) -> $A {
    if self.isSome() {
        return self.unwrap()
    }
    return default
}

fn extends orDoFn(self: ?$A, f:() -> $A) -> $A {
    if self.isSome() {
        return self.unwrap()
    }
    return f()
}

fn extends isNone(self: ?$A) -> Bool {
    return !(self.isSome())
}

// Maybe type

enum Maybe(A) {
    Just: $A,
    Nothing
}

fn extends toMaybe(self: ?$A) -> Maybe($A) {
    if self.isSome() {
        return Maybe::Just(self.unwrap())
    }
    return Maybe::Nothing() @[A: $A]
}

fn extends isJust(self: Maybe($A)) -> Bool {
    match self {
        Just(x) -> {return true}
        Nothing() -> {return false}
    }
    return false
}

// result type

enum Result(A, B) {
    Ok: $A,
    Err: $B
}

fn extends toResult(self: ?$A, err: $B) -> Result($A, $B) {
    if self.isSome() {
        return Result::Ok(self.unwrap())
    }
    return Result::Err(err)
}

// math functions

fn extends min(self: Int, other: Int) -> Int {
    if self < other {
        return self
    }
    return other
}

fn extends max(self: Int, other: Int) -> Int {
    if self > other {
        return self
    }
    return other
}

fn extends abs(self: Int) -> Int {
    if self < 0 {
        return -self
    }
    return self
}

fn extends pow(self: Int, other: Int) -> Int {
    let result = 1
    for i <- 0; i < other; i += 1 {
        result = result * self
    }
    return result
}

// basic list functions

fn extends iota(n: Int) -> [Int] {
    let result = []: Int
    for i <- 0; i < n; i += 1 {
        result.push(i)
    }
    return result
}

fn extends toStep(start: Int, end: Int, step: Int) -> [Int] {
    let result = []: Int
    for i <- start; i < end; i += step {
        result.push(i)
    }
    return result
}

fn extends to(self: Int, end: Int) -> [Int] {
    let result = []: Int
    for i <- self; i <= end; i += 1 {
        result.push(i)
    }
    return result
}

// Core functions // like pythons basic functions

fn range(start: Int, end: Int) -> [Int] {
    let result = []: Int
    for i <- start; i < end; i += 1 {
        result.push(i)
    }
    return result
}

fn range(end: Int) -> [Int] {
    return range(0, end)
}

fn bin(n: Int) -> String {
    if n < 0 {
        return "-" + bin(-n)
    }
    let result = ""
    let i = n
    while i > 0 {
        result = Cast::string(i % 2) + result
        i = i / 2
    }
    return result
}

fn divmod(n: Int, d: Int) -> #(Int, Int) {
    return #(n / d, n % d)
}

fn round(n: Float) -> Int {
    // since its a Float, should be safe to cast
    return Cast::int(n + 0.5).unwrap()
}