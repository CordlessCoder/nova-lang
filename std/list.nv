module List

fn extends fill(list: [$A], input: $A, ammount: Int) -> [$A] {
    for i <- 0; i < ammount; i += 1 {
        list.push(input)
    }
    return list
}

fn extends map(list: [$A], f:($A) -> $B) -> [$B] {
    let result = []:$B
    for (x in list) {
        result.push(f(x))
    }
    return result
}

fn extends flatmap(list: [$T], f: ($T) -> [$U]) -> [$U] {
    let result = []:$U
    for (x in list) {
        for (y in f(x)) {
            result.push(y)
        }
    }
    return result
}

fn extends filter(list: [$A], f:($A) -> Bool) -> [$A] {
    let result = []:$A
    for (x in list) {
        if f(x) {
            result.push(x)
        }
    }
    return result
}

fn extends remove(list: [$K], index: Int) -> [$K] {
    let result = []:$K
    for i <- 0; i < list.len(); i += 1 {
        if i != index {
            result.push(list[i])
        }
    }
    return result
}

fn extends foreach(list: [$A], f:($A)) {
    for (x in list) {
        f(x)
    }
}

fn extends index_of(arr: [$K], k: $K) -> Int {
    let index = 0
    for i <- 0; i < arr.len(); i += 1 {
        if arr[i] == k {
            return index;
        }
        index += 1;
    }
    return -1;
}

fn extends flatten(input: [[$T]]) -> [$T] {
    let result = []: $T
    for (i in input) {
        for (c in i) {
            result.push(c)
        }
    }
    return result
}

fn extends split(input: [Char], delim: Char) -> [[Char]] {
    let result = []: [Char]
    let current = []: Char
    for (c in input) {
        if c == delim {
            result.push(clone(current))
            current = []: Char
        } else {
            current.push(c)
        }
    }
    result.push(clone(current))
    return result
}

fn extends sort(input: [Int]) -> [Int] {
    let result = input
    for i <- 0; i < result.len(); i += 1 {
        for j <- i + 1; j < result.len(); j += 1 {
            if result[i] > result[j] {
                let temp = result[i]
                result[i] = result[j]
                result[j] = temp
            }
        }
    }
    return result
}

fn extends concat(input: [$a], arraytwo: [$a]) -> [$a] {
  for i <- 0; i < arraytwo.len(); i += 1 {
    input.push(arraytwo[i])
  }
  return clone(input)
}

fn extends quicksort(array: [Int]) -> [Int] {
  if array.len() < 2 {
    return array
  }

  let pivot = array[array.len() / 2]
    
  let left = []:Int
  let right = []:Int
  let equal = []:Int

  for i <- 0; i < array.len(); i += 1 {
    
    if array[i] < pivot {
      left.push(array[i])
    } elif array[i] > pivot {
      right.push(array[i])
    } else {
      equal.push(array[i])
    }
  }

  left = left.quicksort()
  right = right.quicksort()

  return left.concat(equal).concat(right)
}

fn extends foldr(input: [Int], f: (Int,Int) -> Int) -> Int {
    let result = 0
    for (i in input) {
        result = f(i,result)
    }
    return result
}

fn extends foldl(input: [Int], f: (Int,Int) -> Int) -> Int {
    let result = 0
    for (i in input) {
        result = f(result,i)
    }
    return result
}