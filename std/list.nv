module List

fn extends fill(list: [$A], input: $A, ammount: Int) -> [$A] {
    for i <- 0; i < ammount; i += 1 {
        list.push(input)
    }
    return list
}

fn extends map(list: [$A], f:($A) -> $B) -> [$B] {
    let result = []:$B
    for (x in list) {
        result.push(f(x))
    }
    return result
}

fn extends flatmap(list: [$T], f: ($T) -> [$U]) -> [$U] {
    let result = []:$U
    for (x in list) {
        for (y in f(x)) {
            result.push(y)
        }
    }
    return result
}

fn extends filter(list: [$A], f:($A) -> Bool) -> [$A] {
    let result = []:$A
    for (x in list) {
        if f(x) {
            result.push(x)
        }
    }
    return result
}

fn extends remove(list: [$K], index: Int) -> [$K] {
    let result = []:$K
    for i <- 0; i < list.len(); i += 1 {
        if i != index {
            result.push(list[i])
        }
    }
    return result
}

fn extends foreach(list: [$A], f:($A)) {
    for (x in list) {
        f(x)
    }
}

fn extends index_of(arr: [$K], k: $K) -> Int {
    let index = 0
    for i <- 0; i < arr.len(); i += 1 {
        if arr[i] == k {
            return index;
        }
        index += 1;
    }
    return -1;
}