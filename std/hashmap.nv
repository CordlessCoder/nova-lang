module hashmap

import list
import core

struct HashMap(K,V) {
    keys: [$K],
    values: [$V],
}

fn  extends(HashMap) default() -> HashMap($K,$V) {
    return HashMap {
        keys: []:$K,
        values: []:$V,
    }
}

fn extends insert(self: HashMap($K,$V), k: $K, v: $V) {
    for (key in self.keys) {
        if key == k {
            self.values[List::index_of(self.keys, key)] = v;
            return;
        }
    }
    self.keys.push(k)
    self.values.push(v)
}

fn extends get(self: HashMap($K,$V), k: $K) -> ?$V {
    for (key in self.keys) {
        if key == k {
            return self.values[List::index_of(self.keys, key)];
        }
    }
    return ?$V
}

fn extends delete(self: HashMap($K,$V), k: $K) {
    let index = List::index_of(self.keys, k)
    if index != -1 {
        self.keys = List::remove(self.keys, index)
        self.values = List::remove(self.values, index)
    }
}

fn extends show(self: HashMap($K,$V)) {
    if self.keys.len() == 0 {
        println("Empty HashMap")
    } else {
        for i <- 0; i < self.keys.len(); i += 1 {
            println(toStr(self.keys[i] )+ " -> " + toStr(self.values[i]))
        }
    }
}
