module tui

struct Item(T) {
    name: String,
    kind: String,
    trigger: fn($T) -> String
}

struct Menu(T) {
    name: String,
    screen: fn($T) -> String,
    Items: [Item($T)]
}

struct SceneManager(T) {
    currentScene: String,
    state: $T,
    scenes: [Menu($T)]
}

fn extends show(self: SceneManager($T)) {
    let check = true
    let index = 0

    let showError = || {
        println("not a valid Item")
        readln()
    }

    let showErrorMsg = |msg: String| {
        println(msg)
        exit()
    }

    while check {
        index = 0
        let op = []: Item($T)
        terminal::clearScreen()

        for scene in self.scenes {
            if self.currentScene == scene.name {
                println(scene::screen(self.state))
                for item in scene.Items {
                    println(Cast::string(index) + " :" + item.name)
                    op.push(item)
                    index += 1
                }
                break
            }
        }

        print("\n>> ")
        let input = readln()
        if let u = Cast::int(input) {
            if u >= op.len() {
                showError()
            } else {
                if op[u].kind == "goto" {
                    self.currentScene = op[u]::trigger(self.state)
                } else {
                    showErrorMsg("Error: " + op[u].kind + " is not a valid Item kind")
                }
            }
        } else {
            showError()
        }

    }
}